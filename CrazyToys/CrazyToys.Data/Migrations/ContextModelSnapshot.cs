// <auto-generated />
using CrazyToys.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrazyToys.Data.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AgeGroupToy", b =>
                {
                    b.Property<string>("AgeGroupsID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToysID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AgeGroupsID", "ToysID");

                    b.HasIndex("ToysID");

                    b.ToTable("AgeGroupToy");
                });

            modelBuilder.Entity("CategorySubCategory", b =>
                {
                    b.Property<string>("CategoriesID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubCategoriesID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoriesID", "SubCategoriesID");

                    b.HasIndex("SubCategoriesID");

                    b.ToTable("CategorySubCategory");
                });

            modelBuilder.Entity("CrazyToys.Entities.Models.Entities.AgeGroup", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AgeGroupId");

                    b.Property<string>("Interval")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AgeGroups");
                });

            modelBuilder.Entity("CrazyToys.Entities.Models.Entities.Brand", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BrandId");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CrazyToys.Entities.Models.Entities.Category", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CategoryId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CrazyToys.Entities.Models.Entities.Colour", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ColourId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Colours");
                });

            modelBuilder.Entity("CrazyToys.Entities.Models.Entities.Image", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ImageId");

                    b.Property<string>("ToyID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UrlHigh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlLow")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ToyID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CrazyToys.Entities.Models.Entities.SubCategory", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SubCategoryId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("CrazyToys.Entities.Models.Entities.Toy", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ToyId");

                    b.Property<string>("BrandID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColourID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BrandID");

                    b.HasIndex("ColourID");

                    b.ToTable("Toys");
                });

            modelBuilder.Entity("SubCategoryToy", b =>
                {
                    b.Property<string>("SubCategoriesID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToysID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubCategoriesID", "ToysID");

                    b.HasIndex("ToysID");

                    b.ToTable("SubCategoryToy");
                });

            modelBuilder.Entity("AgeGroupToy", b =>
                {
                    b.HasOne("CrazyToys.Entities.Models.Entities.AgeGroup", null)
                        .WithMany()
                        .HasForeignKey("AgeGroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrazyToys.Entities.Models.Entities.Toy", null)
                        .WithMany()
                        .HasForeignKey("ToysID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategorySubCategory", b =>
                {
                    b.HasOne("CrazyToys.Entities.Models.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrazyToys.Entities.Models.Entities.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrazyToys.Entities.Models.Entities.Image", b =>
                {
                    b.HasOne("CrazyToys.Entities.Models.Entities.Toy", null)
                        .WithMany("Images")
                        .HasForeignKey("ToyID");
                });

            modelBuilder.Entity("CrazyToys.Entities.Models.Entities.Toy", b =>
                {
                    b.HasOne("CrazyToys.Entities.Models.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID");

                    b.HasOne("CrazyToys.Entities.Models.Entities.Colour", "Colour")
                        .WithMany()
                        .HasForeignKey("ColourID");

                    b.Navigation("Brand");

                    b.Navigation("Colour");
                });

            modelBuilder.Entity("SubCategoryToy", b =>
                {
                    b.HasOne("CrazyToys.Entities.Models.Entities.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrazyToys.Entities.Models.Entities.Toy", null)
                        .WithMany()
                        .HasForeignKey("ToysID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrazyToys.Entities.Models.Entities.Toy", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
